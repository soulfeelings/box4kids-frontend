const fs = require("fs");
const path = require("path");

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const ruPath = path.join(__dirname, "../src/locales/ru/translation.json");
const uzPath = path.join(__dirname, "../src/locales/uz/translation.json");

function loadTranslationFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, "utf8");
    return JSON.parse(content);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return {};
  }
}

function getKeys(obj, prefix = "") {
  const keys = [];
  for (const key in obj) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    if (typeof obj[key] === "object" && obj[key] !== null) {
      keys.push(...getKeys(obj[key], fullKey));
    } else {
      keys.push(fullKey);
    }
  }
  return keys;
}

function compareTranslations() {
  console.log("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n");

  const ruTranslations = loadTranslationFile(ruPath);
  const uzTranslations = loadTranslationFile(uzPath);

  const ruKeys = getKeys(ruTranslations);
  const uzKeys = getKeys(uzTranslations);

  // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ RU, –Ω–æ –Ω–µ—Ç –≤ UZ
  const missingInUz = ruKeys.filter((key) => !uzKeys.includes(key));

  // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ UZ, –Ω–æ –Ω–µ—Ç –≤ RU
  const missingInRu = uzKeys.filter((key) => !ruKeys.includes(key));

  // –û–±—â–∏–µ –∫–ª—é—á–∏
  const commonKeys = ruKeys.filter((key) => uzKeys.includes(key));

  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   RU —Ñ–∞–π–ª: ${ruKeys.length} –∫–ª—é—á–µ–π`);
  console.log(`   UZ —Ñ–∞–π–ª: ${uzKeys.length} –∫–ª—é—á–µ–π`);
  console.log(`   –û–±—â–∏—Ö –∫–ª—é—á–µ–π: ${commonKeys.length}`);
  console.log(`   –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ UZ: ${missingInUz.length}`);
  console.log(`   –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ RU: ${missingInRu.length}\n`);

  if (missingInUz.length > 0) {
    console.log(`‚ùå –ö–ª—é—á–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ UZ —Ñ–∞–π–ª–µ (${missingInUz.length}):`);
    missingInUz.forEach((key) => {
      console.log(`   - ${key}`);
    });
    console.log("");
  }

  if (missingInRu.length > 0) {
    console.log(`‚ùå –ö–ª—é—á–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ RU —Ñ–∞–π–ª–µ (${missingInRu.length}):`);
    missingInRu.forEach((key) => {
      console.log(`   - ${key}`);
    });
    console.log("");
  }

  if (missingInUz.length === 0 && missingInRu.length === 0) {
    console.log("‚úÖ –í—Å–µ –∫–ª—é—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏!");
  } else {
    console.log("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
    if (missingInUz.length > 0) {
      console.log(
        `   - –î–æ–±–∞–≤—å—Ç–µ ${missingInUz.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π –≤ UZ —Ñ–∞–π–ª`
      );
    }
    if (missingInRu.length > 0) {
      console.log(
        `   - –î–æ–±–∞–≤—å—Ç–µ ${missingInRu.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π –≤ RU —Ñ–∞–π–ª`
      );
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
compareTranslations();
