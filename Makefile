# Box4Kids Frontend Makefile
# –£–¥–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

.PHONY: start build test eject ts-check api-sync api-gen api-upd install clean menu deploy-dev reset-env build-image health-check

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

# Docker Compose –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
COMPOSE_PROJECT_NAME = box4kids-frontend
COMPOSE_FILE = docker-compose.dev.yml

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
menu:
	@echo "$(GREEN)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(GREEN)‚ïë                    Box4Kids Frontend Menu                    ‚ïë$(NC)"
	@echo "$(GREEN)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo ""
	@echo "$(BLUE)–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo "  $(YELLOW)1)$(NC)  –ó–∞–ø—É—Å—Ç–∏—Ç—å dev —Å–µ—Ä–≤–µ—Ä"
	@echo "  $(YELLOW)2)$(NC)  –°–æ–±—Ä–∞—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
	@echo "  $(YELLOW)3)$(NC)  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
	@echo ""
	@echo "$(BLUE)TypeScript:$(NC)"
	@echo "  $(YELLOW)4)$(NC)  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã"
	@echo ""
	@echo "$(BLUE)API –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo "  $(YELLOW)5)$(NC)  –°–∫–∞—á–∞—Ç—å OpenAPI JSON"
	@echo "  $(YELLOW)6)$(NC)  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç"
	@echo "  $(YELLOW)7)$(NC)  –û–±–Ω–æ–≤–∏—Ç—å API (sync + gen)"
	@echo ""
	@echo "$(BLUE)–î–µ–ø–ª–æ–π:$(NC)"
	@echo "  $(YELLOW)8)$(NC)  –î–µ–ø–ª–æ–π –≤ dev"
	@echo "  $(YELLOW)9)$(NC)  –°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo "  $(YELLOW)10)$(NC) –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞"
	@echo "  $(YELLOW)11)$(NC) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
	@echo ""
	@echo "$(BLUE)–£—Ç–∏–ª–∏—Ç—ã:$(NC)"
	@echo "  $(YELLOW)12)$(NC) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
	@echo "  $(YELLOW)13)$(NC) –û—á–∏—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
	@echo "  $(YELLOW)0)$(NC)  –í—ã—Ö–æ–¥"
	@echo ""
	@echo "$(YELLOW)–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (0-13):$(NC) "
	@read -r choice; \
	case $$choice in \
		1) make start ;; \
		2) make build ;; \
		3) make test ;; \
		4) make ts-check ;; \
		5) make api-sync ;; \
		6) make api-gen ;; \
		7) make api-upd ;; \
		8) make deploy-dev ;; \
		9) make reset-env ;; \
		10) make build-image ;; \
		11) make health-check ;; \
		12) make install ;; \
		13) make clean ;; \
		0) echo "$(GREEN)–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã$(NC)" ;; \
		*) echo "$(RED)–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.$(NC)" && make menu ;; \
	esac



# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
start:
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫–∞—é dev —Å–µ—Ä–≤–µ—Ä...$(NC)"
	npm start

build:
	@echo "$(GREEN)üî® –°–æ–±–∏—Ä–∞—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...$(NC)"
	npm run build

test:
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã...$(NC)"
	npm test

eject:
	@echo "$(RED)‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!$(NC)"
	@echo "$(YELLOW)–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ eject? (y/N)$$(NC) "
	@read -r response; \
	if [ "$$response" = "y" ] || [ "$$response" = "Y" ]; then \
		npm run eject; \
	else \
		echo "$(YELLOW)Eject –æ—Ç–º–µ–Ω–µ–Ω$(NC)"; \
	fi

# TypeScript
ts-check:
	@echo "$(GREEN)üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∏–ø—ã TypeScript...$(NC)"
	npm run ts-check

# API –∫–æ–º–∞–Ω–¥—ã
api-sync:
	@echo "$(GREEN)üì• –°–∫–∞—á–∏–≤–∞—é OpenAPI JSON...$(NC)"
	npm run api:sync

api-gen:
	@echo "$(GREEN)‚öôÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É—é API –∫–ª–∏–µ–Ω—Ç...$(NC)"
	npm run api:gen

api-upd:
	@echo "$(GREEN)üîÑ –û–±–Ω–æ–≤–ª—è—é API (sync + gen)...$(NC)"
	npm run api:upd

# –î–µ–ø–ª–æ–π –∫–æ–º–∞–Ω–¥—ã
deploy-dev:
	@echo "$(GREEN)üöÄ –î–µ–ø–ª–æ–π –≤ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ...$(NC)"
	COMPOSE_PROJECT_NAME=$(COMPOSE_PROJECT_NAME) docker compose -f $(COMPOSE_FILE) up -d --force-recreate

reset-env:
	@echo "$(RED)üí£ –°–±—Ä–∞—Å—ã–≤–∞—é –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ $(COMPOSE_PROJECT_NAME)...$(NC)"
	COMPOSE_PROJECT_NAME=$(COMPOSE_PROJECT_NAME) docker compose -f $(COMPOSE_FILE) down -v --remove-orphans || true
	docker image prune -f --filter label=com.docker.compose.project=$(COMPOSE_PROJECT_NAME)
	docker volume prune -f --filter label=com.docker.compose.project=$(COMPOSE_PROJECT_NAME)

build-image:
	@echo "$(GREEN)üõ† –°–æ–±–∏—Ä–∞—é Docker –æ–±—Ä–∞–∑...$(NC)"
	COMPOSE_PROJECT_NAME=$(COMPOSE_PROJECT_NAME) docker compose -f $(COMPOSE_FILE) build --no-cache

health-check:
	@echo "$(GREEN)üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	@for i in 1 2 3 4 5; do \
		if curl -fs http://localhost:$${PORT:-3000}/health > /dev/null; then \
			echo "$(GREEN)‚úÖ Health check passed$(NC)"; \
			exit 0; \
		fi; \
		echo "$(YELLOW)‚è≥ Waiting for app... ($$i/5)$(NC)"; \
		sleep 2; \
	done; \
	echo "$(RED)‚ùå App failed health check$(NC)"; \
	exit 1

# –£—Ç–∏–ª–∏—Ç—ã
install:
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...$(NC)"
	npm install

clean:
	@echo "$(RED)üßπ –û—á–∏—â–∞—é node_modules...$(NC)"
	rm -rf node_modules package-lock.json
	@echo "$(GREEN)üì¶ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...$(NC)"
	npm install

# –ê–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
dev: start
serve: start
run: start
compile: build
check: ts-check
sync: api-sync
gen: api-gen
update: api-upd
deploy: deploy-dev
reset: reset-env
build-docker: build-image
health: health-check 