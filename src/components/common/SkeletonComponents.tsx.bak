import React from "react";

// Базовый компонент скелетона с анимацией
const SkeletonBase: React.FC<{
  className?: string;
  children?: React.ReactNode;
}> = ({ className = "", children }) => (
  <div
    className={`animate-pulse bg-gray-200 rounded ${className}`}
  >
    {children}
  </div>
);

// Скелетон для текста
export const SkeletonText: React.FC<{
  className?: string;
  lines?: number;
}> = ({ className = "", lines = 1 }) => (
  <div className={`space-y-2 ${className}`}>
    {Array.from({ length: lines }).map((_, index) => (
      <SkeletonBase
        key={index}
        className={`h-4 ${index === lines - 1 ? "w-3/4" : "w-full"}`}
      />
    ))}
  </div>
);

// Скелетон для заголовка
export const SkeletonTitle: React.FC<{
  className?: string;
}> = ({ className = "" }) => (
  <SkeletonBase className={`h-8 w-3/4 ${className}`} />
);

// Скелетон для карточки
export const SkeletonCard: React.FC<{
  className?: string;
  height?: string;
}> = ({ className = "", height = "h-32" }) => (
  <SkeletonBase className={`${height} w-full rounded-lg ${className}`} />
);

// Скелетон для аватара
export const SkeletonAvatar: React.FC<{
  size?: string;
  className?: string;
}> = ({ size = "w-12 h-12", className = "" }) => (
  <SkeletonBase className={`${size} rounded-full ${className}`} />
);

// Скелетон для кнопки
export const SkeletonButton: React.FC<{
  className?: string;
  width?: string;
}> = ({ className = "", width = "w-24" }) => (
  <SkeletonBase className={`h-10 ${width} rounded-lg ${className}`} />
);

// Скелетон для списка карточек
export const SkeletonCardList: React.FC<{
  count?: number;
  className?: string;
  cardHeight?: string;
}> = ({ count = 3, className = "", cardHeight = "h-32" }) => (
  <div className={`space-y-4 ${className}`}>
    {Array.from({ length: count }).map((_, index) => (
      <SkeletonCard key={index} height={cardHeight} />
    ))}
  </div>
);

// Скелетон для формы
export const SkeletonForm: React.FC<{
  fields?: number;
  className?: string;
}> = ({ fields = 4, className = "" }) => (
  <div className={`space-y-6 ${className}`}>
    {Array.from({ length: fields }).map((_, index) => (
      <div key={index} className="space-y-2">
        <SkeletonText className="w-1/3" />
        <SkeletonBase className="h-12 w-full rounded-lg" />
      </div>
    ))}
    <div className="flex space-x-4 pt-4">
      <SkeletonButton width="w-24" />
      <SkeletonButton width="w-32" />
    </div>
  </div>
);

// Скелетон для навигации
export const SkeletonNavigation: React.FC<{
  className?: string;
}> = ({ className = "" }) => (
  <div className={`flex justify-between items-center p-4 ${className}`}>
    <SkeletonBase className="w-8 h-8 rounded-full" />
    <SkeletonTitle className="w-1/3" />
    <SkeletonBase className="w-8 h-8 rounded-full" />
  </div>
);

// Скелетон для виджета ребенка
export const SkeletonChildWidget: React.FC<{
  className?: string;
}> = ({ className = "" }) => (
  <div className={`bg-white rounded-lg p-4 shadow-sm ${className}`}>
    <div className="flex items-center space-x-4 mb-4">
      <SkeletonAvatar size="w-16 h-16" />
      <div className="flex-1 space-y-2">
        <SkeletonTitle className="w-1/2" />
        <SkeletonText className="w-3/4" />
      </div>
    </div>
    <div className="space-y-3">
      <SkeletonText lines={2} />
      <div className="flex space-x-2">
        <SkeletonButton width="w-20" />
        <SkeletonButton width="w-24" />
      </div>
    </div>
  </div>
);

// Скелетон для карточки игрушки
export const SkeletonToyBoxCard: React.FC<{
  className?: string;
}> = ({ className = "" }) => (
  <div className={`bg-white rounded-lg p-4 shadow-sm ${className}`}>
    <div className="flex items-center justify-between mb-4">
      <SkeletonTitle className="w-1/3" />
      <SkeletonBase className="w-16 h-6 rounded-full" />
    </div>
    <div className="space-y-3">
      <SkeletonText lines={3} />
      <div className="flex justify-between items-center">
        <SkeletonText className="w-1/4" />
        <SkeletonButton width="w-20" />
      </div>
    </div>
  </div>
);

// Скелетон для страницы онбординга
export const SkeletonOnboardingStep: React.FC<{
  className?: string;
}> = ({ className = "" }) => (
  <div className={`min-h-screen bg-gradient-to-b from-yellow-100 to-yellow-200 ${className}`}>
    <SkeletonNavigation />
    <div className="p-4 space-y-6">
      <SkeletonTitle className="text-center" />
      <SkeletonText lines={3} className="text-center" />
      <SkeletonForm fields={3} />
    </div>
  </div>
);

// Скелетон для главной страницы приложения
export const SkeletonAppInterface: React.FC<{
  className?: string;
}> = ({ className = "" }) => (
  <div className={`min-h-screen bg-yellow-100 ${className}`}>
    {/* Header */}
    <div className="p-4 flex items-center justify-between">
      <SkeletonTitle className="w-1/3" />
      <SkeletonBase className="w-8 h-8 rounded-full" />
    </div>
    
    {/* Content */}
    <div className="p-4 space-y-6">
      {/* Current date */}
      <SkeletonText className="w-1/4" />
      
      {/* Child cards */}
      <div className="space-y-4">
        <SkeletonChildWidget />
        <SkeletonChildWidget />
      </div>
      
      {/* Toy box cards */}
      <div className="space-y-4">
        <SkeletonToyBoxCard />
        <SkeletonToyBoxCard />
      </div>
    </div>
    
    {/* Bottom navigation */}
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4">
      <div className="flex justify-around">
        {Array.from({ length: 4 }).map((_, index) => (
          <SkeletonBase key={index} className="w-8 h-8 rounded-full" />
        ))}
      </div>
    </div>
  </div>
);

// Скелетон для страницы детей
export const SkeletonChildrenPage: React.FC<{
  className?: string;
}> = ({ className = "" }) => (
  <div className={`min-h-screen bg-yellow-100 ${className}`}>
    {/* Header */}
    <div className="p-4 flex items-center justify-center">
      <SkeletonTitle className="w-1/2" />
    </div>
    
    {/* Content */}
    <div className="p-4 space-y-4">
      <SkeletonChildWidget />
      <SkeletonChildWidget />
      <SkeletonChildWidget />
    </div>
    
    {/* Bottom navigation */}
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4">
      <div className="flex justify-around">
        {Array.from({ length: 4 }).map((_, index) => (
          <SkeletonBase key={index} className="w-8 h-8 rounded-full" />
        ))}
      </div>
    </div>
  </div>
);

// Скелетон для профиля
export const SkeletonProfilePage: React.FC<{
  className?: string;
}> = ({ className = "" }) => (
  <div className={`min-h-screen bg-yellow-100 ${className}`}>
    {/* Header */}
    <div className="p-4 flex items-center justify-between">
      <SkeletonTitle className="w-1/3" />
      <SkeletonBase className="w-8 h-8 rounded-full" />
    </div>
    
    {/* Profile content */}
    <div className="p-4 space-y-6">
      {/* Avatar and name */}
      <div className="flex items-center space-x-4">
        <SkeletonAvatar size="w-20 h-20" />
        <div className="flex-1 space-y-2">
          <SkeletonTitle className="w-1/2" />
          <SkeletonText className="w-3/4" />
        </div>
      </div>
      
      {/* Profile sections */}
      <div className="space-y-4">
        {Array.from({ length: 4 }).map((_, index) => (
          <div key={index} className="bg-white rounded-lg p-4">
            <SkeletonTitle className="w-1/3 mb-3" />
            <SkeletonText lines={2} />
          </div>
        ))}
      </div>
    </div>
    
    {/* Bottom navigation */}
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4">
      <div className="flex justify-around">
        {Array.from({ length: 4 }).map((_, index) => (
          <SkeletonBase key={index} className="w-8 h-8 rounded-full" />
        ))}
      </div>
    </div>
  </div>
); 