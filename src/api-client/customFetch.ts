import { clearPersistedStore } from "../store/store";
import { refreshTokenClient } from "./refreshClient";
import { notifications } from "../utils/notifications";
import i18n from "../i18n";

export interface CustomFetchParams {
  url: string;
  method: string;
  data?: any;
  params?: Record<string, any>;
  headers?: HeadersInit;
  signal?: AbortSignal;
}

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ—Ñ—Ä–µ—à–∞
let isRefreshing = false;
let refreshPromise: Promise<string | null> | null = null;

const refreshToken = async (): Promise<string | null> => {
  if (isRefreshing && refreshPromise) {
    return refreshPromise;
  }

  isRefreshing = true;
  refreshPromise = (async () => {
    try {
      const refreshTokenValue = localStorage.getItem("refresh_token");
      if (!refreshTokenValue) {
        return null;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π refreshClient –≤–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–≥–æ fetch
      const response = await refreshTokenClient({
        refresh_token: refreshTokenValue,
      });

      const newAccessToken = response.access_token;
      const newRefreshToken = response.refresh_token;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
      localStorage.setItem("access_token", newAccessToken);
      if (newRefreshToken) {
        localStorage.setItem("refresh_token", newRefreshToken);
      }

      console.log("[customFetch] ‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
      return newAccessToken;
    } catch (error) {
      console.error("[customFetch] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:", error);
      return null;
    } finally {
      isRefreshing = false;
      refreshPromise = null;
    }
  })();

  return refreshPromise;
};

export const customFetch = async <T>({
  url,
  method,
  data,
  params,
  headers,
  signal,
}: CustomFetchParams): Promise<T> => {
  const baseUrl = import.meta.env.VITE_API_URL;

  if (!baseUrl) {
    throw new Error("VITE_API_URL is not set");
  }

  // üß© –°–æ–±–∏—Ä–∞–µ–º query string
  const queryString = params
    ? "?" +
      Object.entries(params)
        .flatMap(([key, value]) => {
          if (Array.isArray(value)) {
            // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            return value.map(
              (item) => `${encodeURIComponent(key)}=${encodeURIComponent(item)}`
            );
          } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä
            return [`${encodeURIComponent(key)}=${encodeURIComponent(value)}`];
          }
        })
        .join("&")
    : "";

  const fullUrl = `${baseUrl}${url}${queryString}`;

  const makeRequest = async (token: string | null = null): Promise<T> => {
    // –î–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π
    let authToken = token;
    if (!authToken) {
      if (url.includes("/admin/")) {
        authToken = localStorage.getItem("admin_token");
      } else {
        authToken = localStorage.getItem("access_token");
      }
    }

    const requestInit: RequestInit = {
      method,
      headers: {
        "Content-Type": "application/json",
        ...(headers || {}),
        ...(authToken && { Authorization: `Bearer ${authToken}` }),
        "Accept-Language": i18n.language.split("-")[0],
      },
      body: data !== undefined ? JSON.stringify(data) : undefined,
      signal,
    };

    // üåê dev-–ª–æ–≥
    if (import.meta.env.DEV) {
      console.debug("[customFetch] ‚Üí", method, fullUrl, requestInit);
    }

    let response: Response;
    try {
      response = await fetch(fullUrl, requestInit);
    } catch (err) {
      if (err instanceof Error && err.message.includes("signal is aborted")) {
        console.error("[customFetch] AbortError");
        return undefined as T;
      }

      console.error("[customFetch] Network error:", err);
      notifications.networkError();
      throw new Error("Network error");
    }

    if (!response.ok) {
      if (response.status === 401) {
        // –î–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –±–µ–∑ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (url.includes("/admin/")) {
          console.warn("[customFetch] –ê–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
          throw new Error("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω");
        }

        // üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Ñ—Ä–µ—à
        if (!url.includes("/auth/refresh")) {
          console.warn(
            "[customFetch] Unauthorized (401), –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω"
          );

          const newToken = await refreshToken();
          if (newToken) {
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            console.log("[customFetch] –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º");
            return makeRequest(newToken);
          }
        }

        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Ñ—Ä–µ—à - –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        console.warn("[customFetch] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –≤—ã—Ö–æ–¥–∏–º");
        localStorage.clear();
        clearPersistedStore();
        window.location.href = "/";
        return undefined as T;
      }

      // üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (—É–¥–∞–ª–µ–Ω –∏–∑ –ë–î –∏–ª–∏ JWT —É—Å—Ç–∞—Ä–µ–ª)
      if (response.status === 404 && url.includes("/users/profile")) {
        console.warn(
          "[customFetch] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (404), –¥–µ–ª–∞–µ–º logout"
        );
        localStorage.clear();
        clearPersistedStore();
        window.location.href = "/";
        return undefined as T;
      }

      let errorMessage = `API error ${response.status}`;
      try {
        const errorJson = await response.json();
        errorMessage =
          errorJson?.message ||
          errorJson?.detail ||
          errorJson?.error ||
          errorMessage;
      } catch {}

      console.error("[customFetch] ‚ùå", response.status, errorMessage);
      throw new Error(errorMessage);
    }

    // ‚õî 204 No Content
    if (response.status === 204) {
      return undefined as T;
    }

    const json = await response.json();

    if (import.meta.env.DEV) {
      console.debug("[customFetch] ‚úÖ", json);
    }

    return json as T;
  };

  return makeRequest();
};
